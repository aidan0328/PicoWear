Pico_Wear.py 使用說明

PicoWear 類別用於控制 Pico Wear 硬體，透過這個類別，您可以：
  1. 初始化並控制 Pico Wear 的硬體元件。
  2. 註冊並處理按鈕按下事件。
  3. 傳送訊息到 LINE Notify 服務。
  4. 連接到 MQTT 伺服器進行訊息通訊。

主要函數說明如下：
__init__(): 初始化 PicoWear 物件，設置計時器、LED、顯示螢幕、MPU6050 感測器、Wi-Fi、RTC 和 MQTT 客戶端。
init_hardware(button_callback=None): 初始化所有硬體元件，包括 OLED 顯示螢幕、MPU6050 傾斜感測器、Wi-Fi、RTC 和 LED。可選參數 button_callback 用於設置按鈕按下時的回呼函數。
detect_button(timer, callback=None): 偵測按鈕狀態，若偵測到按鈕被按下，呼叫指定的回呼函數。
register_button_callback(callback): 註冊按鈕按下時的回呼函數，替換之前的計時器回呼。
line_notify_message(token, msg): 使用 LINE Notify API 傳送訊息。參數 token 為授權令牌，msg 為傳送的訊息內容。
mqtt_connect(mqtt_broker): 連接到指定的 MQTT 伺服器。參數 mqtt_broker 為伺服器位址，成功連接後返回 MQTT 客戶端物件。
 
PicoWear.display (OLED) 的使用說明：
這是 Micropython 中一個 OLED 的驅動，解析度為 128x128 的單色螢幕，每行最多只能顯示 16 個字，超出的話要換行顯示，只能顯示英文字。

基本繪圖：
繼承 framebuf.FrameBuffer 除了原本 framebuf.FrameBuffer 的函數還包含如下：
畫點：display.pixel(x, y, color)
畫線：display.line(x1, y1, x2, y2, color)
畫矩形：display.draw_rectangle(x, y, width, height, color)
填充矩形：display.fill_rectangle(x, y, width, height, color)
畫圓：display.draw_circle(x, y, radius, color)
填充圓：display.fill_circle(x, y, radius, color)
畫三角形：display.draw_triangle(x0, y0, x1, y1, x2, y2, color)
填充三角形：display.fill_triangle(x0, y0, x1, y1, x2, y2, color)
文字顯示：
顯示文字：display.text("Hello", x, y, color)
位圖顯示：
讀取圖片：Image_fb = display.read_bmp_mono('圖片路徑名稱')
繪製位圖：display.drawBitmap(self, Image_fb, x, y)
顯示控制：
更新顯示：display.show()
清除顯示：display.fill(0) 然後 display.show()
調整對比度：display.contrast(contrast_value)
螢幕翻轉：display.rotate(flag)
反轉顯示：display.invert(invert_flag)
電源管理：
開啟顯示：display.poweron()
關閉顯示：display.poweroff()
睡眠模式：display.sleep(sleep_flag)
注意：
顏色使用 1 表示點亮，0 表示熄滅。
座標系統從左上角 (0,0) 開始。
該物件已經使用 Double Buffer 呼叫 display.show() 將緩衝顯示出來。
把畫面填充完畢再一次性顯示可以去除閃爍問題。

self.mpu 使用說明
使用 MPU6050 陀螺儀和加速度計感測器設計的。
它可以進行平躺 Roll Pitch，站立時傾斜角度的計算，並透過 Mahony 濾波算法來實現更準確的姿態估計。
務必每秒一百次計算才能取得穩定角度，請使用 Timer 進行呼叫。
mpu.update_mahony()
mpu.calculate_tilt_angles()
該類別已使用雙緩衝去除角度計算競爭。

主要函數說明如下：
__init__(self, i2c, addr=0x68)
    初始化 MPU6050 類別。
    參數 i2c 是必須的，它是一個已配置的 I2C 物件。
    參數 addr 是設備的 I2C 位址，預設為 0x68。
calibrate(self, samples=100)
    校準 MPU6050，減少讀數誤差。這個方法會收集多個樣本來計算平均偏差。
update_mahony(self)
    計算 mpu6050 平躺的。更新姿態估計，使用 Mahony 濾波算法。
    這個方法會自動根據加速度計和陀螺儀的讀數更新四元數，從而得到較準確的姿態角。
    每秒需要進行 100 運算，運算結果使用 get_angles() 取得。
get_angles(self)
    獲取計算後的歐拉角（Roll, Pitch, Yaw）。角度以度（°）為單位。
read_accel(self)
    讀取加速度資料，從 MPU6050 的加速度計感測器取得資料。返回的加速度資料經過轉換為 g 單位（重力加速度的倍數）。
read_gyro(self)
    讀取陀螺儀資料，從 MPU6050 的陀螺儀感測器取得資料。返回的陀螺儀資料經過轉換為度每秒（deg/s），描述角速度。
read_accel_raw(self)
    直接讀取原始加速度資料。
calculate_tilt_angles_with_filter(self)
    計算 mpu6050 站立之後的傾斜角度，使用互補濾波器來平滑角度變化，以應對快速動態變化。
    此方法返回的角度以度（°）為單位，並會將角度維持在 -180° 到 180° 的範圍內。
Get_tilt_angles(self)
    取得 Get_tilt_angles 計算後的角度。
calibrate_tilt(self, num_samples=100)
    校準站立時傾斜角度，主要用於設置加速度計的偏移值。

PicoWear 示例：
from Pico_Wear import PicoWear  # 引入 PicoWear 類別
# 創建 PicoWear 物件
pico_wear = PicoWear()

# 註冊按鈕回呼函數
def on_button_press():
    print("按鈕被按下")
pico.register_button_callback(on_button_press)

# 傳送 LINE Notify 訊息
pico.line_notify_message("your_line_token", "Hello from PicoWear!")

# 連接 MQTT 伺服器
mqtt_client = pico.mqtt_connect("mqtt_broker_address")
if mqtt_client:
    mqtt_client.publish("topic", "message")

# 驅動 PicoWear 內建的 LED
pico_wear.led.value(1)  # 點亮 LED
pico_wear.led.value(0)  # 熄滅 LED
pico_wear.led.toggle()  # 切換 LED

# 判斷 Wi-Fi 是否已經連線
pico_wear.wifi.isconnected()

# 取得 RTC 的時間
pico_wear.rtc.datetime()

# 取得 MAC 地址
pico_wear.mac_addr

# main.py

from Pico_Wear import PicoWear  # 引入 PicoWear 類別
import time

# ========== 全域變數 ==========
pico_wear = None

# =============================

def main():
    global pico_wear
    pico_wear = PicoWear()
    print('完成 Pico Wear 的初始化')
    
    while True:
        time.sleep(0.1)

if __name__ == '__main__':
    main()


以上是 main.py 的基本框架，不得使用額外的模組的情況下，來完成以下的需求： 









請幫我寫出：

1. 這是連接到 Wi-Fi 的 SSID 與密碼：
    SSID = "WIFI 的 SSID"
    PASSWORD = "WIFI 的 密碼"
2. 還沒連上 Wi-Fi 的時候，讓內建的 LED 不斷閃爍，一旦連上就恆亮
3. 把 ip 跟 MAC 地址顯示在 OLED 上
4. MQTT 服務器：broker.mqttgo.io
5. 按下按鈕就推送這樣的訊息到 MQTT 服務器，如果傳送成功就讓 LED 轉態
    傳送主題(Topic)：pico_w/led
    訊息：MAC 地址 + 時間 + LED 狀態